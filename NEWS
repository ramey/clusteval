clusteval 0.2.1
---------------

UPDATES

* `comembership()` and `cluster_similarity()` are more robust to non-factor
  labels. #35

clusteval 0.2
-------------

PLOTTING

* An S3 `plot()` function has been added to plot a summary of the similarity
  values stored in a ClustOmit object. The plotting function utilizes the
  `ggplot2` package.

CLUSTER EVALUATION METHODS

* `figure_of_merit()` is an implementation of the Figure of Merit statistic
  proposed by Yeung et al. (2001) to estimate the predictive power of a
  clustering algorithm.

CLUSTER SIMILARITY

* Several similarity indices have been added. These include the following:

* `adjusted_rand()` implements the adjusted Rand index.

* `dice()` implements the Dice similarity.

* `fowlkes_mallows()` implements the Folkes-Mallows index.

* `phi()` implements the Phi coefficient.

* `rogers_tanimoto()` implements the Rogers-Tanimoto similarity.

* `russel_rao()` implements the Russel-Rao similarity.

* `sokal_sneath()` implements the Sokal-Sneath similarity.

* `similarity_methods()` also briefly describes the available similarity methods
  and miscellaneous details

* `variation_information()` calculates Meila's (2007) Variation of Information
  (VI) metric between two clusterings of the same data set. VI is an
  information-theoretic criterion that measures the amount of information lost
  and gained between two clusterings.

MISCELLANEOUS

* `clustomit()` no longer uses stratifed sampling by default. This functionality
  can be employed by settting `stratified = TRUE`. By default, we now use
  nonparametric bootstrapping with the caveat that we first randomly sample one
  observation from each cluster. See the documentation for details.

* With regards to the previous change to `clustomit()`, we have renamed
  `boot_stratified_omit()` to `boot_omit()` and added the optional `stratified`
  argument.

* Simplified the naming of the similarity indices. For example, `jaccard_indep()`
  is now `jaccard()`, and `rand_indep()` is now `rand()`.

* When printing a `clustomit` object, a summary is now provided.

* Minor bug fixes in `clustomit()`.

* `sim_unif()` is now greatly simplified.

* Cleaned up documentation.

clusteval 0.1
-------------

NEW FEATURES

* First version of the `clusteval` package. With this package, we aim to provide
  tools to evaluate the quality of clusterings and individual clusters obtained
  by applying a clustering algorithm to a data set.

CLUSTER EVALUATION METHODS

* `clustomit()` is an implementation of the ClustOmit statistic, which assesses
  the cluster omission admissibility condition from Fisher and Van Ness (1971)
  to evaluate the stability of a clustering algorithm applied to a data set.
  The sampling distribution of the ClustOmit statistic is approximated with a
  stratifed, nonparametric bootstrapping scheme, which we compute with the
  `mclapply()` function in the `parallel` package.

CLUSTER SIMILARITY

* `cluster_similarity()` computes the similarity between the cluster labels
  determined by two clustering algorithms applied to the same data set.
  Currently, we have implemented the Jaccard coefficient and the Rand index, each
  of which result in proportions with values near 1 suggesting similar
  clusterings, while values near 0 suggest dissimilar clusterings.

* `comembership()` calculates the comemberships of all pairs of a vector of
  clustering labels. Two observations are said to be comembers if they are
  clustered together. We use the `Rcpp` package to calculate quickly the
  comemberships for all observations pairs.

* `comembership_table()` calculates the comemberships of all pairs of a vector of
  clustering labels obtained from two clustering algorithms and summarizes the
  agreements and disagreements between the two clustering algorithms in a 2x2
  contingency table. Similar to `comembership()`, we use the `Rcpp` package here
  to calculate quickly the comemberships for all observations pairs.

SIMULATED DATA SETS

* `sim_data()` is a wrapper function that generates data from the three
  data-generating models given below. By default, each of the models samples
  random variates from five populations. The separation between the models and
  the origin is controlled by a nonnegative scalar 'delta', which is useful in
  determining the efficacy of a clustering algorithm as the population separation
  is increased.

* `sim_unif()` generates random variates from five multivariate uniform
  populations. The populations do not overlap for values of `delta` greater than
  or equal to 1.

* `sim_normal()` generates random variates from multivariate normal populations
  with intraclass covariance matrices.

* `sim_student()` generates random variates from multivariate Student's t
  populations having a common covariance matrix.

MISCELLANEOUS

* `random_clustering()` randomly clusters a data set into K clusters and is
  useful for a baseline comparison of a clustering algorithm.

